#include "esp_camera.h"
#include <WiFi.h>

#define BLYNK_TEMPLATE_ID "TMPL6yfGWCYkW"
#define BLYNK_TEMPLATE_NAME "esp32camdoorlock"
#define BLYNK_AUTH_TOKEN "YgXOHtpjZum_iQ4ocPChoUYLR080YXDp"

#define BLYNK_PRINT Serial

#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"

const int trigPin = 13;
const int echoPin = 14;

#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

float duration;
float distanceCm;
float distanceInch;
float jarak;

const char* ssid = "TexasKost"; //Wifi Name SSID
const char* password = "wisnuudahpwt"; //WIFI Password

void startCameraServer();

int ipBlynk;
bool matchFace;

const int RELAY_PIN = 2;

long prevMillis = 0;
int interval = 15000;

WidgetLCD lcd(V0);  //Blynk LCD

BlynkTimer timer;
/*-----------------------------------------------------------------------------------------*/

BLYNK_CONNECTED() {
  // Request the latest state from the server
  Blynk.syncVirtual(V3);
}

BLYNK_WRITE(V3) { // Pompa
  ipBlynk = param.asInt();
}
/*--------------------------------------------------------------------------------------*/
void setup() {
  Serial.begin(115200);

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);

  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers

  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  }
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);

#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
  delay(5000);
  timer.setInterval(15000L, TampilIP);
  timer.setInterval(2000L, cm);
  timer.setInterval(2000L, LCD);
  timer.setInterval(15000L, wajah);
}

void cm() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distanceCm = duration * SOUND_SPEED / 2;
  jarak = distanceCm;
  Blynk.virtualWrite(V1, jarak);
  delay(1000);
}

void wajah() {
int RELAYKON = digitalRead (RELAY_PIN);

  while (matchFace == true )  {
    Serial.print("UNLOCK DOOR");
    lcd.print(8, 0, "Dikenal");

    if (RELAYKON == LOW) {
      digitalWrite(RELAY_PIN, HIGH);
      lcd.print(8, 1, "Dibuka");
    }

    prevMillis = millis();
  }

  if (RELAY_PIN == HIGH && millis() - prevMillis > interval) {
    matchFace = false;
    Serial.print("LOCK DOOR");
    lcd.print(8, 1, "Ditutup");
    digitalWrite(RELAY_PIN, LOW);
    delay(500);
  }
}

void LCD () {
  lcd.print(0, 0, "Wajah :");
  lcd.print(0, 1, "Pintu :");
}

void TampilIP () {
  while (ipBlynk == 1) {
    lcd.print(0, 0, WiFi.localIP().toString());
    delay(5000);
    lcd.clear();
  }
}

void loop() {
  while (WiFi.status() != WL_CONNECTED) {
    otomatiswifi();
  }
  Blynk.run();
  timer.run();
}

void otomatiswifi() {
  // Cek apakah koneksi WiFi dan Blynk terhubung
  if (WiFi.status() != WL_CONNECTED || !Blynk.connected()) {

      // Mulai koneksi WiFi

      WiFi.begin(ssid, password);

      // Mulai koneksi ke Blynk
      Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
    }
  }
